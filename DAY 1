Set matrix zeroes******************
class Solution {
    public void setZeroes(int[][] matrix) {
        
        
        //THIS CODE WORK ONLY IF THEIR IS NO NEGATIVE VALUE AND TIME COMPLEXITY FOR THIS CODE IS (ROW*COL)(ROW+COL);***************BRUTE FORCE SOLUTION
       /* int row=matrix.length;
        int col=matrix[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    int index=j-1;
                    while(index>=0){
                        if(matrix[i][index]!=0){
                            matrix[i][index]=Integer.MIN_VALUE;
                            
                        }
                        index--;
                    }
                    index=j+1;
                    while(index<col){
                        if(matrix[i][index]!=0){
                            matrix[i][index]=Integer.MIN_VALUE;
                        }
                        index++;
                    }
                    index=i-1;
                    while(index>=0){
                        if(matrix[index][j]!=0){
                            matrix[index][j]=Integer.MIN_VALUE;
                        }
                        index--;
                    }
                    index=i+1;
                    while(index<row){
                        if(matrix[index][j]!=0){
                            matrix[index][j]=Integer.MIN_VALUE;
                        }
                        index++;
                    }
                    
                }
            }
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==Integer.MIN_VALUE){
                    matrix[i][j]=0;
                }
            }
        }
        */
        
        
        //OPTIMAL APPROACH USING SPACE IN THIS APPROACH WE TAKE TWO DUMMY ARRAY AND FILL ALL THE ELEMENTS OF SUMMY ARRAY BY -1 INITIALLY AND THEN TRAVERSE THE MATRIX IF 0 FOUND THEN MARK IT INTO DUMMY ARRYS AND THEN AGAIN TRAVERSE AND UPDATE THE  VALUE OF MATRIX IF 0 IS FOUND IN DUMMY ARRAYS.
     /*   int row=matrix.length;
        int col=matrix[0].length;
        int[] dummy1=new int[row];
        int []dummy2=new int[col];
        Arrays.fill(dummy1,-1);
        Arrays.fill(dummy2,-1);
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    dummy1[i]=0;
                    dummy2[j]=0;
                }
            }
        }         //TIME COMPLEXITY FOR THIS CODE IS *******(COL*ROW)**** AND SC IS nN BCZ OF EXTRA SPACE
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(dummy1[i]==0|| dummy2[j]==0){
                    matrix[i][j]=0;
                }
            }
        }*/
        
        //OPTIMIZING OPTIMAL APPROACH WITHOUT USING EXTRA SPACE ASSUME THE FIRST ROW AND COL OF MATRIX AS DUMMY ARRAYS IF WE DO SO THEN MATRIX[0][0] IS OVERLAPPING SO FOR THIS WE3 TAKE ONE VARIABLE FOR THE COLUMN 0 SAY AS COL0.
        
      int row=matrix.length;
        int col=matrix[0].length;
        int colo=1;
        for(int i=0;i<row;i++){
            if(matrix[i][0]==0)colo=0;
            for(int j=1;j<col;j++){
                if(matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        //we have to traverse from back
        for(int i=row-1;i>=0;i--){
            for(int j=col-1;j>=1;j--){
                
                if(matrix[i][0]==0 || matrix[0][j]==0){
                    matrix[i][j]=0;
                }}
                if(colo==0){
                    matrix[i][0]=0;
                
            }
        }
        
        
    }
}



QUESTIONS2) PASCAL TRIANGLE 
class Solution {
    public List<List<Integer>> generate(int numRows) {
        //WE'LL STORE THE PASCAL TRIANGLE INTO 2-D ARRAY IF WE TRY TO ANALYSE THE PROBLEM WE'LL SEE ONE LOGIC THAT FIRST ELEMENT MEANS IF COL==0 THE ANSWER IS ALWAYS ONE AND IF I==J THEN ALSO ANSWER IS ONE AND THE REST OF THE ELEMENTS IS THE SUM OF THE PREVIOUS-ROW-1+PREVIOUS-ROW. HERE IS THE COMPLETE CODE.
        
        List<List<Integer>> ans=new ArrayList<>(); // for storing answer
        List<Integer> row,prev=null; // initiliase row and col array to null
       
        for(int i=0;i<numRows;i++){
            row=new ArrayList<>(); // row array
            for(int j=0;j<=i;j++){
                if(j==0|| j==i){
                    row.add(1);
                }
             else   row.add(prev.get(j-1)+prev.get(j));
            }
            prev=row;
            ans.add(row);
        }
        return ans;
        
        
    }
} *********** COMPLEXITY IS (N*N)



QUESTION 3) NEXT PERMUTATION
class Solution {
    
        // 1)Brute force ************ find all permutation using backtracking using n! time complexity and then find the next permutation.
        
        // 2)using c++ inbuilt function i.e. (next-permutation(arr,arr+3));
        
        //optimal *************1)traverse the array from back if(arr[i]<=arr[i+1]) then stop and store that index into index1;  2)again traverse the arrys from back and if and element just then index1 is found then stopaqnd store that index also as index2.               3) swap index1 and index2      4)reverse all the elements after index1
        
    public void nextPermutation(int[] A) {
         if(A == null || A.length <= 1) return;
        int i = A.length - 2;
        while(i >= 0 && A[i] >= A[i + 1]) i--; 
        if(i >= 0) {                           
            int j = A.length - 1;              
            while(A[j] <= A[i]) j--;      
            swap(A, i, j);                     
        }
        reverse(A, i + 1, A.length - 1);      
}

public void swap(int[] A, int i, int j) {
    int tmp = A[i];
    A[i] = A[j];
    A[j] = tmp;
}

public void reverse(int[] A, int i, int j) {
    while(i < j) swap(A, i++, j--);
}

} ****************COMPLEXITY IS LINEAR I.E. N
